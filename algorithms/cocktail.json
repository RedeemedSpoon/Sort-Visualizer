{
  "Name": "Cocktail Sort",
  "Date": "Ancient",
  "Author": "Unknown",
  "Description": "Cocktail sort, also known as bidirectional bubble sort, is a variation of bubble sort that iterates through the array in both forward and backward directions. In each pass, it compares adjacent elements and swaps them if necessary. This process continues until a pass completes without any swaps, indicating the array is sorted.\n\nWhile it might seem like a simple improvement over bubble sort, cocktail sort can be slightly more efficient for specific data patterns, particularly when larger elements are clustered near the beginning or end of the array. However, its overall time complexity remains O(n²), making it unsuitable for very large datasets.",
  "Complexity": {
    "Time": "O(n²)",
    "Best": "O(n)",
    "Worst": "O(n²)",
    "Space": "O(1)",
    "Stable": "Yes"
  },
  "Algorithm": "async function sort(){let a=!0,r=array.length-1,t=0;for(;a;){a=!1;for(let t=0;t<r;t++)if(array[t]>array[t+1]){if(swap(t,t+1),await sleep(),firstRun)return;a=!0}r--;for(let i=r-1;i>t;i--)if(array[i]>array[i+1]){if(swap(i,i+1),await sleep(),firstRun)return;a=!0}t++}}",
  "Code": {
    "Python": "def cocktailshakersort(arr):\n\tn = len(arr)\n\t swapped = True\n\t start = 0\n\t end = n - 1\n\t while swapped:\n\t\tswapped = False\n\t\t # Forward pass (like Bubble Sort)\n\t\t for i in range(start, end):\n\t\t if arr[i] > arr[i + 1]:\n\t\t\t arr[i], arr[i + 1] = arr[i + 1], arr[i]\n\t\t\t swapped = True\n\t\t end -= 1\n\t\t # Backward pass (like Bubble Sort)\n\t\t for i in range(end - 1, start - 1, -1):\n\t\t if arr[i] > arr[i + 1]:\n\t\t\t arr[i], arr[i + 1] = arr[i + 1], arr[i]\n\t\t\t swapped = True\n\t\t start += 1\n\n# Test array\narr = [12, 34, 54, 2, 12, 90]\ncocktailshakersort(arr)\nprint('Sorted array is:', arr)",
    "JavaScript": "function cocktailshakersort(arr) {\n\tlet n = arr.length;\n\tlet swapped = true;\n\tlet start = 0;\n\tlet end = n - 1;\n\twhile (swapped) {\n\t\tswapped = false;\n\t\t// Forward pass (like Bubble Sort)\n\t\tfor (let i = start; i < end; i++) {\n\t\t\tif (arr[i] > arr[i + 1]) {\n\t\t\t\t[arr[i], arr[i + 1]] = [arr[i + 1], arr[i]]; // Swap using destructuring\n\t\t\t\tswapped = true;\n\t\t\t}\n\t\t}\n\t\tend--;\n\t\t// Backward pass (like Bubble Sort)\n\t\tfor (let i = end - 1; i > start; i--) {\n\t\t\tif (arr[i] > arr[i + 1]) {\n\t\t\t\t[arr[i], arr[i + 1]] = [arr[i + 1], arr[i]]; // Swap using destructuring\n\t\t\t\tswapped = true;\n\t\t\t}\n\t\t}\n\t\tstart++;\n\t}\n\n\t// Test array\n\tlet arr = [12, 34, 54, 2, 12, 90];\n\tcocktailshakersort(arr);\n\tconsole.log('Sorted array is:', arr);\n}",
    "Java": "public static void cocktailshakersort(int[] arr) {\n\tint n = arr.length;\n\tboolean swapped = true;\n\tint start = 0;\n\tint end = n - 1;\n\twhile (swapped) {\n\t\tswapped = false;\n\t\t// Forward pass (like Bubble Sort)\n\t\tfor (int i = start; i < end; i++) {\n\t\t\tif (arr[i] > arr[i + 1]) {\n\t\t\t\tint temp = arr[i];\n\t\t\t\tarr[i] = arr[i + 1];\n\t\t\t\tarr[i + 1] = temp;\n\t\t\t\tswapped = true;\n\t\t\t}\n\t\t}\n\t\tend--;\n\t\t// Backward pass (like Bubble Sort)\n\t\tfor (int i = end - 1; i > start; i--) {\n\t\t\tif (arr[i] > arr[i + 1]) {\n\t\t\t\tint temp = arr[i];\n\t\t\t\tarr[i] = arr[i + 1];\n\t\t\t\tarr[i + 1] = temp;\n\t\t\t\tswapped = true;\n\t\t\t}\n\t\t}\n\t\tstart++;\n\t}\n\n\t// Test array\n\tint[] arr = {12, 34, 54, 2, 12, 90};\n\tcocktailshakersort(arr);\n\tSystem.out.println(\"Sorted array is:\" + java.util.Arrays.toString(arr));\n}",
    "Go": "func cocktailshakersort(arr []int) {\n\tn := len(arr)\n\tswapped := true\n\tstart := 0\n\tend := n - 1\n\tfor swapped {\n\t\tswapped = false\n\t\t// Forward pass (like Bubble Sort)\n\t\tfor i := start; i < end; i++ {\n\t\t\tif arr[i] > arr[i+1] {\n\t\t\t\tarr[i], arr[i+1] = arr[i+1], arr[i]\n\t\t\t\tswapped = true\n\t\t\t}\n\t\t}\n\t\tend--\n\t\t// Backward pass (like Bubble Sort)\n\t\tfor i := end - 1; i > start; i-- {\n\t\t\tif arr[i] > arr[i+1] {\n\t\t\t\tarr[i], arr[i+1] = arr[i+1], arr[i]\n\t\t\t\tswapped = true\n\t\t\t}\n\t\t}\n\t\tstart++\n\t}\n\n\t// Test array\n\tarr := []int{12, 34, 54, 2, 12, 90}\n\tcocktailshakersort(arr)\n\tfmt.Println(\"Sorted array is:\", arr)\n}",
    "C": "void cocktailshakersort(int arr[], int n) {\n\tint swapped = 1;\n\tint start = 0;\n\tint end = n - 1;\n\twhile (swapped) {\n\t\tswapped = 0;\n\t\t// Forward pass (like Bubble Sort)\n\t\tfor (int i = start; i < end; i++) {\n\t\t\tif (arr[i] > arr[i + 1]) {\n\t\t\t\tint temp = arr[i];\n\t\t\t\tarr[i] = arr[i + 1];\n\t\t\t\tarr[i + 1] = temp;\n\t\t\t\tswapped = 1;\n\t\t\t}\n\t\t}\n\t\tend--;\n\t\t// Backward pass (like Bubble Sort)\n\t\tfor (int i = end - 1; i > start; i--) {\n\t\t\tif (arr[i] > arr[i + 1]) {\n\t\t\t\tint temp = arr[i];\n\t\t\t\tarr[i] = arr[i + 1];\n\t\t\t\tarr[i + 1] = temp;\n\t\t\t\tswapped = 1;\n\t\t\t}\n\t\t}\n\t\tstart++;\n\t}\n\n\t// Test array\n\tint arr[] = {12, 34, 54, 2, 12, 90};\n\tint n = sizeof(arr) / sizeof(arr[0]);\n\tcocktailshakersort(arr, n);\n\tprintf(\"Sorted array is: \");\n\tfor (int i = 0; i < n; i++) {\n\t\tprintf(\"%d \", arr[i]);\n\t}\n}"
  }
}
