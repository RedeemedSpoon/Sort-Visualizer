{
  "Name": "Heap Sort",
  "Date": "1964",
  "Author": "J. W. J. Williams",
  "Description": "Heap sort is a sorting algorithm that utilizes a heap data structure for efficient element arrangement. It follows a divide-and-conquer approach, initially building a max-heap (where the root has the largest value) from the input array. This process involves repeatedly swapping elements to ensure the heap property holds (parent element greater than or equal to children).\n\nOnce the max-heap is constructed, the largest element (root) is extracted and placed at the end of the sorted array. The heap is then rearranged by swapping the root with the last element and restoring the heap property. This process of extraction, rearrangement, and swapping continues until the entire array is sorted in descending order. For ascending order, a min-heap (root has the smallest value) would be used.",
  "Complexity": {
    "Time": "O(n log n)",
    "Best": "O(n log n)",
    "Worst": "O(n log n)",
    "Space": "O(1)",
    "Stable": "No"
  },
  "Algorithm": "",
  "Code": {
    "Python": "def heapify(arr, n, i):\n\tlargest = i  # Initialize largest as root\n\tleft = 2 * i + 1  # left = 2*i + 1\n\tright = 2 * i + 2  # right = 2*i + 2\n\n\t# See if left child is larger than root\n\tif left < n and arr[left] > arr[largest]:\n\t\tlargest = left\n\n\t# See if right child is larger than largest so far\n\tif right < n and arr[right] > arr[largest]:\n\t\tlargest = right\n\n\t# If largest is not root\n\tif largest != i:\n\t\tarr[i], arr[largest] = arr[largest], arr[i]  # swap\n\t\theapify(arr, n, largest)\n\n def heapSort(arr):\n\tn = len(arr)\n\n\t# Build a maxheap\n\tfor i in range(n // 2 - 1, -1, -1):\n\t\theapify(arr, n, i)\n\n\t# One by one extract an element from heap\n\tfor i in range(n - 1, 0, -1):\n\t\tarr[i], arr[0] = arr[0], arr[i]  # swap\n\t\theapify(arr, i, 0)\n\n # Test array\n arr = [12, 11, 13, 5, 6, 7]\n heapSort(arr)\n print('Sorted array is:', arr)",
    "JavaScript": "function heapify(arr, n, i) {\n\tlet largest = i; // Initialize largest as root\n\tconst left = 2 * i + 1; // left = 2*i + 1\n\tconst right = 2 * i + 2; // right = 2*i + 2\n\n\t// See if left child is larger than root\n\tif (left < n && arr[left] > arr[largest]) {\n\t\tlargest = left;\n\t}\n\n\t// See if right child is larger than largest so far\n\tif (right < n && arr[right] > arr[largest]) {\n\t\tlargest = right;\n\t}\n\n\t// If largest is not root\n\tif (largest !== i) {\n\t\t[arr[i], arr[largest]] = [arr[largest], arr[i]]; // swap\n\t\theapify(arr, n, largest);\n\t}\n}\n\nfunction heapSort(arr) {\n\tconst n = arr.length;\n\n\t// Build a maxheap\n\tfor (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n\t\theapify(arr, n, i);\n\t}\n\n\t// One by one extract an element from heap\n\tfor (let i = n - 1; i > 0; i--) {\n\t\t[arr[i], arr[0]] = [arr[0], arr[i]]; // swap\n\t\theapify(arr, i, 0);\n\t}\n}",
    "Java": "public class HeapSort {\n\tpublic static void heapify(int arr[], int n, int i) {\n\t\tlargest = i; // Initialize largest as root\n\t\tleft = 2 * i + 1; // left = 2*i + 1\n\t\tright = 2 * i + 2; // right = 2*i + 2\n\n\t\t// See if left child is larger than root\n\t\tif (left < n && arr[left] > arr[largest])\n\t\t\tlargest = left;\n\n\t\t// See if right child is larger than largest so far\n\t\tif (right < n && arr[right] > arr[largest])\n\t\t\tlargest = right;\n\n\t\t// If largest is not root\n\t\tif (largest != i) {\n\t\t\ttemp = arr[i];\n\t\t\tarr[i] = arr[largest];\n\t\t\tarr[largest] = temp; // swap\n\n\t\t\theapify(arr, n, largest);\n\t\t}\n\t}\n\n\tpublic static void heapSort(int arr[]) {\n\t\tn = arr.length;\n\n\t\t// Build a maxheap\n\t\tfor (int i = n / 2 - 1; i >= 0; i--) {\n\t\t\theapify(arr, n, i);\n\t\t}\n\n\t\t// One by one extract an element from heap\n\t\tfor (int i = n - 1; i > 0; i--) {\n\t\t\t// Move current root to end\n\t\t\ttemp = arr[0];\n\t\t\tarr[0] = arr[i];\n\t\t\tarr[i] = temp;\n\n\t\t\theapify(arr, i, 0);\n\t\t}\n\t}\n\n\tpublic static void main(String args[]) {\n\t\tint arr[] = {12, 11, 13, 5, 6, 7};\n\t\tint n = arr.length;\n\n\t\tSystem.out.println(\"Unsorted array is \");\n\t\tfor (int i = 0; i < n; ++i)\n\t\t\tSystem.out.print(arr[i] + \" \");\n\n\t\theapSort(arr);\n\n\t\tSystem.out.println(\"\nSorted array is \");\n\t\tfor (int i = 0; i < n; ++i)\n\t\t\tSystem.out.print(arr[i] + \" \");\n\t}\n}",
    "Go": "func heapify(arr []int, n int, i int) {\n\tlargest := i  // Initialize largest as root\n\tleft := 2*i + 1  // left = 2*i + 1\n\tright := 2*i + 2  // right = 2*i + 2\n\n\t// See if left child is larger than root\n\tif left < n && arr[left] > arr[largest] {\n\t\tlargest = left\n\t}\n\n\t// See if right child is larger than largest so far\n\tif right < n && arr[right] > arr[largest] {\n\t\tlargest = right\n\t}\n\n\t// If largest is not root\n\tif largest != i {\n\t\tarr[i], arr[largest] = arr[largest], arr[i]  // swap\n\t\theapify(arr, n, largest)\n\t}\n}\n\nfunc heapSort(arr []int) {\n\tn := len(arr)\n\n\t// Build a maxheap\n\tfor i := n/2 - 1; i >= 0; i-- {\n\t\theapify(arr, n, i)\n\t}\n\n\t// One by one extract an element from heap\n\tfor i := n - 1; i > 0; i-- {\n\t\tarr[i], arr[0] = arr[0], arr[i]  // swap\n\t\theapify(arr, i, 0)\n\t}\n}",
    "C": "void heapify(int arr[], int n, int i) {\n\tint largest = i; // Initialize largest as root\n\tint left = 2 * i + 1; // left = 2*i + 1\n\tint right = 2 * i + 2; // right = 2*i + 2\n\n\t// See if left child is larger than root\n\tif (left < n && arr[left] > arr[largest])\n\t\tlargest = left;\n\n\t// See if right child is larger than largest so far\n\tif (right < n && arr[right] > arr[largest])\n\t\tlargest = right;\n\n\t// If largest is not root\n\tif (largest != i) {\n\t\tswap(&arr[i], &arr[largest]); // swap\n\t\theapify(arr, n, largest);\n\t}\n}\n\nvoid swap(int *a, int *b) {\n\tint temp = *a;\n\t*a = *b;\n\t*b = temp;\n}\n\nvoid heapSort(int arr[], int n) {\n\t// Build a maxheap\n\tfor (int i = n / 2 - 1; i >= 0; i--)\n\t\theapify(arr, n, i);\n\n\t// One by one extract an element from heap\n\tfor (int i = n - 1; i > 0; i--) {\n\t\tswap(&arr[i], &arr[0]); // swap\n\t\theapify(arr, i, 0);\n\t}\n}"
  }
}
