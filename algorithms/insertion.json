{
  "Name": "Insertion Sort",
  "Date": "Ancient",
  "Author": "Unknown",
  "Description": "Insertion sort iterates through the input array, considering each element from the second one onwards. It takes this element and inserts it into its correct position within the sub-array already considered to be sorted. This insertion is achieved by shifting larger elements in the sub-array one position to the right, creating a space for the element being inserted.\n\nInsertion sort is efficient for small arrays or partially sorted data (where many elements are already in their correct positions). However, its time complexity of O(n^2) in the worst case becomes a disadvantage for large datasets.",
  "Complexity": {
    "Time": "O(n²)",
    "Best": "O(n)",
    "Worst": "O(n²)",
    "Space": "O(1)",
    "Stable": "Yes"
  },
  "Algorithm": "async function sort(){for(let a=1;a<array.length;a++){let r=a;for(;r>0&&array[r]<array[r-1];){if(swap(r-1,r),await sleep(),firstRun)return;r--}}}",
  "Code": {
    "Python": "def insertionsort(arr):\n\tn = len(arr)\n\tfor i in range(1, n):\n\t\t# Current element to be inserted\n\t\tkey = arr[i]\n\t\t# Move elements, that are greater than key, to one position ahead\n\t\tj = i - 1\n\t\twhile j >= 0 and key < arr[j]:\n\t\t\tarr[j + 1] = arr[j]\n\t\t\tj -= 1\n\t\tarr[j + 1] = key\n\n# Test array\narr = [12, 11, 13, 5, 6, 7]\ninsertionsort(arr)\nprint('Sorted array is:', arr)",
    "JavaScript": "function insertionsort(arr) {\n\tlet n = arr.length;\n\tfor (let i = 1; i < n; i++) {\n\t\t// Current element to be inserted\n\t\tlet key = arr[i];\n\t\t// Move elements, that are greater than key, to one position ahead\n\t\tlet j = i - 1;\n\t\twhile (j >= 0 && key < arr[j]) {\n\t\t\tarr[j + 1] = arr[j];\n\t\t\tj -= 1;\n\t\t}\n\t\tarr[j + 1] = key;\n\t}\n\n\t// Test array\n\tlet arr = [12, 11, 13, 5, 6, 7];\n\tinsertionsort(arr);\n\tconsole.log('Sorted array is:', arr);\n}",
    "Java": "public static void insertionsort(int[] arr) {\n\tint n = arr.length;\n\tfor (int i = 1; i < n; ++i) {\n\t\t// Current element to be inserted\n\t\tint key = arr[i];\n\t\t// Move elements, that are greater than key, to one position ahead\n\t\tint j = i - 1;\n\t\twhile (j >= 0 && key < arr[j]) {\n\t\t\tarr[j + 1] = arr[j];\n\t\t\tj--;\n\t\t}\n\t\tarr[j + 1] = key;\n\t}\n\n\t// Test array\n\tint[] arr = {12, 11, 13, 5, 6, 7};\n\tinsertionsort(arr);\n\tSystem.out.println(\"Sorted array is:\" + java.util.Arrays.toString(arr));\n}",
    "Go": "func insertionsort(arr []int) {\n\tn := len(arr)\n\tfor i := 1; i < n; i++ {\n\t\t// Current element to be inserted\n\t\tkey := arr[i]\n\t\t// Move elements, that are greater than key, to one position ahead\n\t\tj := i - 1\n\t\tfor j >= 0 && key < arr[j] {\n\t\t\tarr[j + 1] = arr[j]\n\t\t\tj--\n\t\t}\n\t\tarr[j + 1] = key\n\t}\n\n\t// Test array\n\tarr := []int{12, 11, 13, 5, 6, 7}\n\tinsertionsort(arr)\n\tfmt.Println(\"Sorted array is:\", arr)\n}",
    "C": "void insertionsort(int arr[], int n) {\n\tfor (int i = 1; i < n; i++) {\n\t\t// Current element to be inserted\n\t\tint key = arr[i];\n\t\t// Move elements, that are greater than key, to one position ahead\n\t\tint j = i - 1;\n\t\twhile (j >= 0 && key < arr[j]) {\n\t\t\tarr[j + 1] = arr[j];\n\t\t\tj--;\n\t\t}\n\t\tarr[j + 1] = key;\n\t}\n\n\t// Test array\n\tint arr[] = {12, 11, 13, 5, 6, 7};\n\tint n = sizeof(arr) / sizeof(arr[0]);\n\tinsertionsort(arr, n);\n\tprintf(\"Sorted array is: \");\n\tfor (int i = 0; i < n; i++) {\n\t\tprintf(\"%d \", arr[i]);\n\t}\n}"
  }
}
