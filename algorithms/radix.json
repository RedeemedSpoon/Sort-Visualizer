{
  "Name": "Radix Sort",
  "Date": "Ancient",
  "Author": "Unknown",
  "Description": "Radix sort is a non-comparison-based sorting technique that exploits the positional nature of numbers (e.g., digits in base-10). It works by repeatedly sorting the input data on each digit position (least significant digit first) using a counting sort or similar stable sorting algorithm.\n\nAfter a pass on a particular digit position, the elements are placed in stable sub-lists based on their digit values. These sub-lists are then concatenated to form a partially sorted list. The process is repeated for higher-order digit positions until the entire array is sorted.\n\nRadix sort has a time complexity of O(n * k/d), where k is the number of digits and d is the number of elements. This makes it efficient for data with a fixed number of digits or where values fall within a specific range.",
  "Complexity": {
    "Time": "O(n * k/d)",
    "Best": "O(n)",
    "Worst": "O(n * k/d)",
    "Space": "O(n + 2áµˆ)",
    "Stable": "Yes"
  },
  "Algorithm": "async function sort(){let r=1,a=!1;for(;!a;){const t=[];for(let r=0;r<10;r++)t.push([]);for(let e=0;e<array.length;e++){const n=array[e]/r;t[Math.floor(n%10)].push(array[e]),a=!0;for(let r=0;r<array.length-1;r++)array[r]>array[r+1]&&(a=!1)}let e=0;for(let r=0;r<10;r++){const a=t[r];for(let r=0;r<a.length;r++){if(swap(array.indexOf(array[e]),array.indexOf(a[r])),await sleep(),firstRun)return;e++}}r*=10}}",
  "Code": {
    "Python": "def radix_sort(arr):\n\tmax_value = max(arr)\n\texp = 1\n\twhile max_value // exp > 0:\n\t\tbuckets = [[] for _ in range(10)]\n\t\tfor i in arr:\n\t\t\tindex = (i // exp) % 10\n\t\t\tbuckets[index].append(i)\n\t\tarr = []\n\t\tfor i in range(10):\n\t\t\tfor item in buckets[i]:\n\t\t\t\tarr.append(item)\n\t\t\texp *= 10\n\treturn arr\n\n# Test array\narr = [170, 45, 75, 90, 802, 24, 2, 66]\nprint('Sorted array is:', radix_sort(arr))",
    "JavaScript": "function radixSort(arr) {\n\tlet max_value = Math.max(...arr);\n\tlet exp = 1;\n\twhile (max_value // exp > 0) {\n\t\tconst buckets = Array(10).fill([]);\n\t\tfor (let i of arr) {\n\t\t\tlet index = Math.floor((i / exp) % 10);\n\t\t\tbuckets[index].push(i);\n\t\t}\n\t\tarr = [];\n\t\tfor (let i = 0; i < 10; i++) {\n\t\t\tfor (let item of buckets[i]) {\n\t\t\t\tarr.push(item);\n\t\t\t}\n\t\t}\n\t\texp *= 10;\n\t}\n\treturn arr;\n\t}\n\n// Test array\nlet arr = [170, 45, 75, 90, 802, 24, 2, 66];\nconsole.log('Sorted array is:', radixSort(arr));",
    "Java": "public static int[] radixSort(int[] arr) {\n\tint max_value = Integer.MIN_VALUE;\n\tfor (int i : arr) {\n\t\tmax_value = Math.max(max_value, i);\n\t}\n\tint exp = 1;\n\twhile (max_value / exp > 0) {\n\t\tint[][] buckets = new int[10][];\n\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\tint index = (arr[i] / exp) % 10;\n\t\t\tif (buckets[index] == null) {\n\t\t\t\tbuckets[index] = new int[0];\n\t\t\t}\n\t\t\tbuckets[index] = Arrays.copyOf(buckets[index], buckets[index].length + 1);\n\t\t\tbuckets[index][buckets[index].length - 1] = arr[i];\n\t\t}\n\t\tint index = 0;\n\t\tfor (int i = 0; i < 10; i++) {\n\t\t\tif (buckets[i] != null) {\n\t\t\t\tfor (int item : buckets[i]) {\n\t\t\t\t\tarr[index++] = item;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\texp *= 10;\n\t}\n\treturn arr;\n\t}\n\n// Test array\nint[] arr = {170, 45, 75, 90, 802, 24, 2, 66};\nSystem.out.println('Sorted array is: ' + Arrays.toString(radixSort(arr)));",
    "Go": "func radixSort(arr []int) []int {\n\tmax_value := arr[0]\n\tfor _, val := range arr {\n\t\tmax_value = max(max_value, val)\n\t}\n\texp := 1\n\tfor max_value/exp > 0 {\n\t\tbuckets := make([][]int, 10)\n\t\tfor _, val := range arr {\n\t\t\tindex := (val / exp) % 10\n\t\t\tbuckets[index] = append(buckets[index], val)\n\t\t}\n\t\tarr = []int{}\n\t\tfor i := 0; i < 10; i++ {\n\t\t\tarr = append(arr, buckets[i]...)\n\t\t}\n\t\texp *= 10\n\t}\n\treturn arr\n\t}\n\n// Test array\narr := []int{170, 45, 75, 90, 802, 24, 2, 66}\nfmt.Println('Sorted array is:', radixSort(arr))",
    "C": "void radix_sort(int arr[], int n) {\n\tint max_value = arr[0];\n\tfor (int i = 1; i < n; i++) {\n\t\tmax_value = max(max_value, arr[i]);\n\t}\n\tint exp = 1;\n\twhile (max_value / exp > 0) {\n\t\tint count[10] = {0};\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tint index = (arr[i] / exp) % 10;\n\t\t\tcount[index]++;\n\t\t}\n\t\tint output[n];\n\t\tfor (int i = 1; i < 10; i++) {\n\t\t\tcount[i] += count[i - 1];\n\t\t}\n\t\tfor (int i = n - 1; i >= 0; i--) {\n\t\t\tint index = (arr[i] / exp) % 10;\n\t\t\toutput[count[index] - 1] = arr[i];\n\t\t\tcount[index]--;\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tarr[i] = output[i];\n\t\t}\n\t\texp *= 10;\n\t}\n\t}\n\n// Test array\nint arr[] = {170, 45, 75, 90, 802, 24, 2, 66};\nint n = sizeof(arr) / sizeof(arr[0]);\nradix_sort(arr, n);\nprintf('Sorted array is: ');\nfor (int i = 0; i < n; i++) {\n\tprintf('%d ', arr[i]);\n}\nprintf('\\n');"
  }
}
