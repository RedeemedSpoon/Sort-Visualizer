{
  "Name": "Shell Sort",
  "Date": "1959",
  "Author": "Donald Shell",
  "Description": "Shell sort is an improvement over insertion sort, introducing the concept of gaps (distances between elements compared during insertion). It iterates through the array, comparing elements at certain gap intervals and performing swaps if necessary.\n\nThe initial gap typically starts large, allowing elements far apart in the array to be compared and potentially swapped, promoting a more sorted state. Gradually, smaller gaps are used, refining the sorted order until a gap of 1 is reached, effectively performing a standard insertion sort.",
  "Complexity": {
    "Time": "O(n⁴/³)",
    "Best": "O(n log n)",
    "Worst": "O(n³/²)",
    "Space": "O(1)",
    "Stable": "No"
  },
  "Algorithm": "async function sort(){let r=array.length;for(let a=Math.floor(r/2);a>0;a=Math.floor(a/2))for(let t=a;t<r;t+=1){let r,e=array[t];for(r=t;r>=a&&array[r-a]>e;r-=a)if(swap(r,r-a),await sleep(),firstRun)return;if(swap(r,array.indexOf(e)),await sleep(),firstRun)return}}",
  "Code": {
    "Python": "def shellsort(arr):\n\tn = len(arr)\n\t# Define the gap sequence (here, Knuth's sequence)\n\tgap = n // 2\n\twhile gap > 0:\n\t\t# Do an insertion sort for each sub-array with size gap\n\t\tfor i in range(gap, n):\n\t\t# The first element (arr[i]) is already in its place\n\t\ttemp = arr[i]\n\t\tj = i\n\t\twhile j >= gap and arr[j - gap] > temp:\n\t\t\tarr[j] = arr[j - gap]\n\t\t\tj -= gap\n\t\tarr[j] = temp\n\t\tgap //= 2\n\n# Test array\narr = [12, 34, 54, 2, 12, 90]\nshellsort(arr)\nprint('Sorted array is:', arr)",
    "JavaScript": "function shellsort(arr) {\n\tlet n = arr.length;\n\t// Define the gap sequence (here, Knuth's sequence)\n\tlet gap = Math.floor(n / 2);\n\twhile (gap > 0) {\n\t\t// Do an insertion sort for each sub-array with size gap\n\t\tfor (let i = gap; i < n; i++) {\n\t\t// The first element (arr[i]) is already in its place\n\t\tlet temp = arr[i];\n\t\tlet j = i;\n\t\twhile (j >= gap && arr[j - gap] > temp) {\n\t\t\tarr[j] = arr[j - gap];\n\t\t\tj -= gap;\n\t\t}\n\t\tarr[j] = temp;\n\t\t}\n\t\tgap = Math.floor(gap / 2);\n\t}\n}\n\n// Test array\nlet arr = [12, 34, 54, 2, 12, 90];\nshellsort(arr);\nconsole.log('Sorted array is:', arr);",
    "Java": "public static void shellsort(int[] arr) {\n\tint n = arr.length;\n\t// Define the gap sequence (here, Knuth's sequence)\n\tint gap = n / 2;\n\twhile (gap > 0) {\n\t\t// Do an insertion sort for each sub-array with size gap\n\t\tfor (int i = gap; i < n; i++) {\n\t\t// The first element (arr[i]) is already in its place\n\t\tint temp = arr[i];\n\t\tint j = i;\n\t\twhile (j >= gap && arr[j - gap] > temp) {\n\t\t\tarr[j] = arr[j - gap];\n\t\t\tj -= gap;\n\t\t}\n\t\tarr[j] = temp;\n\t\t}\n\t\tgap /= 2;\n\t}\n\n\t// Test array\n\tint[] arr = {12, 34, 54, 2, 12, 90};\n\tshellsort(arr);\n\tSystem.out.println(\"Sorted array is:\" + java.util.Arrays.toString(arr));\n}",
    "Go": "func shellsort(arr []int) {\n\tn := len(arr)\n\t// Define the gap sequence (here, Knuth's sequence)\n\tgap := n / 2\n\tfor gap > 0 {\n\t\t// Do an insertion sort for each sub-array with size gap\n\t\tfor i := gap; i < n; i++ {\n\t\t// The first element (arr[i]) is already in its place\n\t\ttemp := arr[i]\n\t\tj := i\n\t\tfor j >= gap && arr[j-gap] > temp {\n\t\t\tarr[j] = arr[j-gap]\n\t\t\tj -= gap\n\t\t}\n\t\tarr[j] = temp\n\t\t}\n\t\tgap /= 2\n\t}\n\n\t// Test array\n\tarr := []int{12, 34, 54, 2, 12, 90}\n\tshellsort(arr)\n\tfmt.Println(\"Sorted array is:\", arr)\n}",
    "C": "void shellsort(int arr[], int n) {\n\t// Define the gap sequence (here, Knuth's sequence)\n\tint gap = n / 2;\n\twhile (gap > 0) {\n\t\t// Do an insertion sort for each sub-array with size gap\n\t\tfor (int i = gap; i < n; i++) {\n\t\t// The first element (arr[i]) is already in its place\n\t\tint temp = arr[i];\n\t\tint j = i;\n\t\twhile (j >= gap && arr[j - gap] > temp) {\n\t\t\tarr[j] = arr[j - gap];\n\t\t\tj -= gap;\n\t\t}\n\t\tarr[j] = temp;\n\t\t}\n\t\tgap /= 2;\n\t}\n\n\t// Test array\n\tint arr[] = {12, 34, 54, 2, 12, 90};\n\tint n = sizeof(arr) / sizeof(arr[0]);\n\tshellsort(arr, n);\n\tprintf(\"Sorted array is: \");\n\tfor (int i = 0; i < n; i++) {\n\t\tprintf(\"%d \", arr[i]);\n\t}\n}"
  }
}
