{
  "Name": "Spaghetti Sort",
  "Date": "1984",
  "Author": "A. K. Dewdney",
  "Description": "Spaghetti sort, similar to bead sort, is a theoretical sorting algorithm that involves manipulating physical spaghetti strands. The strands are initially mixed, and then sorting is achieved by repeatedly picking a random pair of strands and swapping them if they are in the wrong order. Due to its reliance on physical manipulation and randomness, spaghetti sort is not a practical sorting method for most applications.",
  "Complexity": {
    "Time": "O(n)",
    "Best": "O(n)",
    "Worst": "O(n)",
    "Space": "O(nÂ²)",
    "Stable": "Yes"
  },
  "Algorithm": "async function sort(){const a=[...array];for(let r=0;r<array.length-1;r++){const n=Math.max(...a);if(a.splice(a.indexOf(n),1),console.log(n),swap(array.indexOf(n),array.length-r - 1),await sleep(),firstRun)return}}",
  "Code": {
    "Python": "import random\n\ndef spaghetti_sort(noodles):\n\tsorted_noodles = []\n\twhile len(noodles) > 0:\n\t\tlongest_noodle = max(noodles)\n\t\tsorted_noodles.append(longest_noodle)\n\t\tnoodles.remove(longest_noodle)\n\treturn sorted_noodles\n\n# Example usage with random noodle lengths\nnoodle_lengths = [random.randint(1, 100) for _ in range(20)]\nprint(\"Original noodles:\", noodle_lengths)\nsorted_noodles = spaghetti_sort(noodle_lengths.copy())  # Avoid modifying the original list\nprint(\"Sorted noodles:\", sorted_noodles)",
    "JavaScript": "function spaghettiSort(noodles) {\n\t// Sorts a list of noodle lengths (integers) using the spaghetti sort method.\n\tconst sortedNoodles = [];\n\twhile (noodles.length > 0) {\n\t\tconst longestNoodle = Math.max(...noodles);\n\t\tsortedNoodles.push(longestNoodle);\n\t\tnoodles.splice(noodles.indexOf(longestNoodle), 1);\n\t}\n\treturn sortedNoodles;\n}\n\n// Example usage with random noodle lengths\nconst noodleLengths = Array.from({ length: 20 }, () => Math.floor(Math.random() * 100) + 1);\nconsole.log(\"Original noodles:\", noodleLengths);\nconst sortedNoodles = spaghettiSort([...noodleLengths]);\nconsole.log(\"Sorted noodles:\", sortedNoodles);",
    "Java": "public class SpaghettiSort {\n\tpublic static int[] spaghettiSort(int[] noodles) {\n\t\t// Sorts a list of noodle lengths (integers) using the spaghetti sort method.\n\t\tList<Integer> sortedNoodles = new ArrayList<>();\n\t\twhile (noodles.length > 0) {\n\t\t\tint longestNoodle = Arrays.stream(noodles).max().getAsInt();\n\t\t\tsortedNoodles.add(longestNoodle);\n\t\t\tint[] remainingNoodles = Arrays.stream(noodles).filter(n -> n != longestNoodle).toArray(Integer[]::new);\n\t\t\tnoodles = remainingNoodles;\n\t\t}\n\t\treturn sortedNoodles.stream().mapToInt(i -> i).toArray();\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tint[] noodleLengths = new int[20];\n\t\tfor (int i = 0; i < noodleLengths.length; i++) {\n\t\t\tnoodleLengths[i] = (int) (Math.random() * 100) + 1;\n\t\t}\n\t\tSystem.out.println(\"Original noodles:\" + Arrays.toString(noodleLengths));\n\t\tint[] sortedNoodles = spaghettiSort(noodleLengths.clone());\n\t\tSystem.out.println(\"Sorted noodles:\" + Arrays.toString(sortedNoodles));\n\t}\n}",
    "Go": "package main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n)\n\nfunc spaghettiSort(noodles []int) []int {\n\t// Sorts a list of noodle lengths (integers) using the spaghetti sort method.\n\tsortedNoodles := []int{}\n\tfor len(noodles) > 0 {\n\t\tlongestNoodle := 0\n\t\tfor _, n := range noodles {\n\t\t\tif n > longestNoodle {\n\t\t\t\tlongestNoodle = n\n\t\t\t}\n\t\t}\n\t\tsortedNoodles = append(sortedNoodles, longestNoodle)\n\t\tnoodles = remove(noodles, longestNoodle)\n\t}\n\treturn sortedNoodles\n}\n\nfunc remove(noodles []int, longestNoodle int) []int {\n\tresult := []int{}\n\tfor _, n := range noodles {\n\t\tif n != longestNoodle {\n\t\t\tresult = append(result, n)\n\t\t}\n\t}\n\treturn result\n}\n\nfunc main() {\n\tnoodleLengths := make([]int, 20)\n\tfor i := range noodleLengths {\n\t\tnoodleLengths[i] = rand.Intn(100) + 1\n\t}\n\tfmt.Println(\"Original noodles:\", noodleLengths)\n\tsortedNoodles := spaghettiSort(append([]int{}, noodleLengths...))\n\tfmt.Println(\"Sorted noodles:\", sortedNoodles)\n}",
    "C": "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint *spaghettiSort(int *noodles, int n) {\n\t// Sorts a list of noodle lengths (integers) using the spaghetti sort method.\n\tint *sortedNoodles = malloc(n * sizeof(int));\n\tfor (int i = 0; i < n; i++) {\n\t\tsortedNoodles[i] = 0;\n\t}\n\twhile (n > 0) {\n\t\tint longestNoodle = noodles[0];\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tif (noodles[i] > longestNoodle) {\n\t\t\t\tlongestNoodle = noodles[i];\n\t\t\t}\n\t\t}\n\t\tsortedNoodles[n - 1] = longestNoodle;\n\t\tint *remainingNoodles = malloc((n - 1) * sizeof(int));\n\t\tint j = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (noodles[i] != longestNoodle) {\n\t\t\t\tremainingNoodles[j++] = noodles[i];\n\t\t\t}\n\t\t}\n\t\tfree(noodles);\n\t\tn = n - 1;\n\t\tnoodles = remainingNoodles;\n\t}\n\treturn sortedNoodles;\n}\n\nint main() {\n\tsrand(time(NULL));\n\tint noodleLengths[20];\n\tfor (int i = 0; i < 20; i++) {\n\t\tnoodleLengths[i] = rand() % 100 + 1;\n\t}\n\tprintf(\"Original noodles: \");\n\tfor (int i = 0; i < 20; i++) {\n\t\tprintf(\"%d \", noodleLengths[i]);\n\t}\n\tprintf(\"\\n\");\n\tint *sortedNoodles = spaghettiSort(noodleLengths, 20);\n\tprintf(\"Sorted noodles: \");\n\tfor (int i = 0; i < 20; i++) {\n\t\tprintf(\"%d \", sortedNoodles[i]);\n\t}\n\tprintf(\"\\n\");\n\tfree(sortedNoodles);\n\treturn 0;\n}"
  }
}
